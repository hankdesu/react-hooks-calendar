{"version":3,"sources":["Calendar.js","index.js"],"names":["Wrapper","styled","div","Header","MonthButton","Body","DayWrapper","isToday","selected","Calendar","props","DAYS","DAYS_OF_LEAP","useState","Date","date","setDate","getDate","day","setDay","getMonth","month","setMonth","getFullYear","year","setYear","getStartDate","startDate","setStartDate","clickedDate","setClickedDate","getDay","onMonthChange","e","id","target","onDateClicked","value","Number","result","dateClickedCallback","useEffect","onClick","map","week","index","key","days","blankDate","Array","fill","daysOfMonth","today","renderDays","Container","ReactDOM","render","console","log","document","getElementById"],"mappings":"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","file":"static/js/main.b915e24b.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\n\nconst Wrapper = styled.div`\n    width: 500px;\n`;\n\nconst Header = styled.div`\n    align-items: center;\n    background-color: #ff5752;\n    box-sizing: border-box;\n    color: #fff;\n    display: flex;\n    font-size: 16px;\n    font-weight: bold;\n    height: 40px;\n    justify-content: space-between;\n    padding: 0 10px;\n    width: 100%;\n`;\n\nconst MonthButton = styled.div`\n    cursor: pointer;\n`;\n\nconst Body = styled.div`\n    background-color: #ff9591;\n    box-sizing: border-box;\n    color: #fff;\n    display: flex;\n    flex-wrap: wrap;\n    font-size: 16px;\n    padding: 10px;\n    width: 100%;\n`;\n\nconst DayWrapper = styled.div`\n    align-items: center;\n    background-color: ${({ isToday, selected }) => {\n        if (isToday && !selected) return '#fff';\n        if (selected) return '#ff3d6e';\n        return '#ff9591'\n    }};\n    color: ${({ isToday }) => isToday ? '#ff9591' : 'auto'};\n    cursor: pointer;\n    display: flex;\n    height: 50px;\n    justify-content: center;\n    width: 14.2%;\n`;\n\nconst Calendar = (props) => {\n    const DAYS = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n    const DAYS_OF_LEAP = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n    const WEEKS = ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'];\n    const MONTHS = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n\n    const [date, setDate] = useState(new Date());\n    const [day, setDay] = useState(date.getDate());\n    const [month, setMonth] = useState(date.getMonth());\n    const [year, setYear] = useState(date.getFullYear());\n    const [startDate, setStartDate] = useState(getStartDate(date));\n    const [clickedDate, setClickedDate] = useState(null);\n\n    useEffect(() => {\n        setDay(date.getDate());\n        setMonth(date.getMonth());\n        setYear(date.getFullYear());\n        setStartDate(getStartDate(date));\n      }, [date]);\n\n    function getStartDate(date) {\n        return new Date(date.getFullYear(), date.getMonth(), 1).getDay();\n    }\n\n    function onMonthChange(e) {\n        const { id } = e.target;\n        if (id === 'prev') {\n            setDate(new Date(year, month - 1, day));\n        } else if (id === 'next') {\n            setDate(new Date(year, month + 1, day));\n        }\n    }\n\n    function onDateClicked(e) {\n        const { id } = e.target;\n        const value = Number(id) - startDate + 1\n        let result = null\n        if (clickedDate && clickedDate.getFullYear() && month === clickedDate.getMonth() && value === clickedDate.getDate()) {\n            setClickedDate(result);\n            dateClickedCallback(result);\n        } else {\n            result = new Date(year, month, Number(value));\n            setClickedDate(result);\n            dateClickedCallback(result);\n        }\n    }\n\n    function dateClickedCallback(result) {\n        if (props.dateClickedCallback) {\n            props.dateClickedCallback(result);\n        }\n    }\n\n    function renderDays() {\n        const days = ((year % 4 === 0 && year % 100 !== 0) || year % 400 === 0) ? DAYS_OF_LEAP : DAYS;\n        const blankDate = new Array(startDate).fill('blank');\n        const daysOfMonth = [...blankDate, ...new Array(days[month])];\n        const today = new Date();\n        return daysOfMonth.map((day, index) => {\n            const value = index - startDate + 1;\n            const isToday = year === today.getFullYear() && month === today.getMonth() && value === today.getDate();\n            const selected = clickedDate\n                ? year === clickedDate.getFullYear() && month === clickedDate.getMonth() && value === clickedDate.getDate()\n                : false;\n            return (\n                <DayWrapper key={index} id={index} isToday={isToday} onClick={onDateClicked} selected={selected}>\n                    {day !== 'blank' ? value : ''}\n                </DayWrapper>\n            );\n        })\n    }\n\n    return (\n        <Wrapper>\n            <Header>\n                <MonthButton id=\"prev\" onClick={onMonthChange}>Prev Month</MonthButton>\n                <div>{year} {MONTHS[month]}</div>\n                <MonthButton id=\"next\" onClick={onMonthChange}>Next Month</MonthButton>\n            </Header>\n            <Body>\n                {WEEKS.map((week, index) => <DayWrapper key={index}>{week}</DayWrapper>)}\n                {renderDays()}\n            </Body>\n        </Wrapper>\n    )\n};\n\nexport default Calendar;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport styled from 'styled-components';\nimport './index.css';\nimport Calendar from './Calendar';\n\nconst Container = styled.div`\n  display: flex;\n  height: 100%;\n  justify-content: center;\n  width: 100%;\n`;\n\nReactDOM.render(\n  <Container>\n    <Calendar dateClickedCallback={(date) => console.log(date)} />\n  </Container>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}